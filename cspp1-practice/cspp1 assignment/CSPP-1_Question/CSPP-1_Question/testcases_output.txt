########## Testcase 0: Failed ##########
Expected Output: 
Given sudoku is solved

Your Output: 
Given sudoku is solved
Traceback (most recent call last):
  File "sudoku.py", line 49, in <module>
    main()
  File "sudoku.py", line 40, in main
    if grid[row][col] == ".":
UnboundLocalError: local variable 'grid' referenced before assignment
----------------------------------------

########## Testcase 1: Passed ##########
Expected Output: 
7
7
7
7
7
7
7
7
7

Your Output: 
7
7
7
7
7
7
7
7
7
----------------------------------------

########## Testcase 2: Passed ##########
Expected Output: 
1
2
3
4
5
6
7
8
9

Your Output: 
1
2
3
4
5
6
7
8
9
----------------------------------------

########## Testcase 3: Failed ##########
Expected Output: 
5
6
2

Your Output: 
526
526
526
----------------------------------------

########## Testcase 4: Passed ##########
Expected Output: 
4
6
9

Your Output: 
4
6
9
----------------------------------------

########## Testcase 5: Failed ##########
Expected Output: 
34
37
47
268
68
2
59
19
15

Your Output: 
3
7
4
6
8
2
9
1
5
----------------------------------------

########## Testcase 6: Passed ##########
Expected Output: 
2
1
8
5
7
4
9
6
3

Your Output: 
2
1
8
5
7
4
9
6
3
----------------------------------------

########## Testcase 7: Failed ##########
Expected Output: 
7
2
6
3
1
5
4
8
9

Your Output: 
762
762
762
315
315
315
894
894
894
----------------------------------------

########## Testcase 8: Passed ##########
Expected Output: 
1
5
2
4
8
9
3
7
6

Your Output: 
1
5
2
4
8
9
3
7
6
----------------------------------------

########## Testcase 9: Failed ##########
Expected Output: 
378
378
378
125
125
125
469
469
469

Your Output: 
8
7
3
5
1
2
9
6
4
----------------------------------------

########## Testcase 10: Passed ##########
Expected Output: 
1
7
4
3
5
2
9
6
8

Your Output: 
1
7
4
3
5
2
9
6
8
----------------------------------------

########## Testcase 11: Passed ##########
Expected Output: 
6
1
5
9
8
3
2
7
4

Your Output: 
6
1
5
9
8
3
2
7
4
----------------------------------------

########## Testcase 12: Failed ##########
Expected Output: 
1
5
2
7
3
9
4
6
8

Your Output: 
152
152
152
739
739
739
864
864
864
----------------------------------------

########## Testcase 13: Failed ##########
Expected Output: 
258
258
258
137
137
137
469
469
469

Your Output: 
528
528
528
713
713
713
649
649
649
----------------------------------------

########## Testcase 14: Failed ##########
Expected Output: 
1
5
2
7
3
9
4
6
8
258
258
258
137
137
137
469
469
469

Your Output: 
521
521
521
379
379
379
468
468
468
258
258
258
371
371
371
469
469
469
----------------------------------------

########## Testcase 15: Failed ##########
Expected Output: 
12357
13
57
6
46
7
23
89
23489
3
34
27
2
15
15
1
17
59
5
68
68
36
36
34678
34678
34678
156
156
156
23689
23689
23689

Your Output: 
941568237
13
57
61
64
57
23
98
941568237
43
43
27
27
51
51
17
17
95
95
68
68
63
63
941568237
13
57
61
64
57
23
98
Traceback (most recent call last):
  File "sudoku.py", line 49, in <module>
    main()
  File "sudoku.py", line 41, in main
    result = set(['1','2','3','4','5','6',"7",'8','9']) - (getRowset(grid,row) or getColset(grid,col) or getSubgrid(grid,row,col))
  File "sudoku.py", line 22, in getSubgrid
    getgrid.add(grid[i][j])
NameError: name 'getgrid' is not defined
----------------------------------------

########## Testcase 16: Failed ##########
Expected Output: 
Invalid Sudoku:Duplicate values

Your Output: 
37492856
37498561
74928561
37928561
37492861
37492851
34928561
37492561
37428561
----------------------------------------

########## Testcase 17: Failed ##########
Expected Output: 
Invalid input

Your Output: 
Traceback (most recent call last):
  File "sudoku.py", line 49, in <module>
    main()
  File "sudoku.py", line 34, in main
    row.append(input_1[k])
IndexError: string index out of range
----------------------------------------

########## Testcase 18: Failed ##########
Expected Output: 
Invalid Sudoku:Duplicate values

Your Output: 
7
----------------------------------------

########## Testcase 19: Failed ##########
Expected Output: 
1679
12679
139
2369
1269
1239
26789
1256789
14589
24569
1245689
12679
1249
124679
2689
15689
125689
234569
1245689
12369
12349
123469
34789
135789
34579
34579
4579
135789
135789
3679
135679
135679
3579
25679
12359
123579
346789
3456789
356789
34579
245679
235789
23589
235789
289
289
289
14589
124589
124589
36789
36789
14789
14789
134689
134689
134689
236789
5789
5789
5789
235689
235689
235689

Your Output: 
612739
612739
612739
612739
612739
612739
61527894
61527894
61527894
61527894
61527894
61527894
61527894
61527894
61523894
61523894
61523894
61523894
61523894
61523894
61523894
61523894
1573894
1573894
1573894
1573894
1573894
1573894
1573894
6152739
6152739
6152739
6152739
6152739
6152739
6152739
65273894
65273894
65273894
65273894
65273894
65273894
65273894
65273894
152894
152894
152894
152894
152894
152894
6173894
6173894
6173894
6173894
6173894
6173894
6173894
6527389
6527389
6527389
6527389
6527389
6527389
6527389
----------------------------------------

########## Testcase 20: Failed ##########
Expected Output: 
Invalid input

Your Output: 
Traceback (most recent call last):
  File "sudoku.py", line 49, in <module>
    main()
  File "sudoku.py", line 34, in main
    row.append(input_1[k])
IndexError: string index out of range
----------------------------------------

########## Testcase 21: Failed ##########
Expected Output: 
124
26
2468
1489
1249
248
247
247
3478
234
2478
12
23
34
24
13457
247
1259
1259
1579
1457
4579
2459
259
2569
579
579
259
1359
1359
159
145
4589
459
134579
134579
357
357
357
134
2378
2378
2378
36
36
12345
12345
12345
2356
2356
1346

Your Output: 
196284
196284
196284
196284
196284
196284
73284
73284
73284
73284
73284
173524
173524
173524
173524
173524
173524
197524
197524
197524
197524
197524
197524
97652
97652
97652
97652
97652
193584
193584
193584
193584
193584
193584
197354
197354
197354
197354
197354
197354
73628
73628
73628
73628
73628
136524
136524
136524
136524
136524
136524
----------------------------------------

########## Testcase 22: Failed ##########
Expected Output: 
2369
2467
24679
2467
1346
23467
1247
2679
679
269
24567
46
24678
2478
1367
236
267
2678
267
136
3467
346
134567
1345
345
145
23467
23467
23467
349
2349
249
349
349
349
12345
12345
2345
234589
234569
234569
23456
23456
4569
4569
123456
123456
123456
234567
4567
4567
4567
45689
45689
45689
4567
4567
4567

Your Output: 
7293641
7293641
7293641
7293641
7293641
7293641
7293641
7259864
7259864
7259864
7259864
7259864
7259864
7259864
728631
728631
728631
728631
728631
728631
753641
753641
753641
753641
753641
753641
729364
729364
729364
729364
729364
729364
2598341
2598341
2598341
2598341
2598341
2598341
2598341
259364
259364
259364
259364
259364
259364
7253641
7253641
7253641
7253641
7253641
7253641
7253641
759864
759864
759864
759864
759864
759864
----------------------------------------

########## Testcase 23: Failed ##########
Expected Output: 
2
1
5
8
6
6
67
5
45
6
49
45
4
1
78
78
4
34
7
46
4
69
26
6

Your Output: 
21
21
586
586
586
76
76
54
54
9546
9546
9546
9546
178
178
178
437
437
437
946
946
946
26
26
----------------------------------------

########## Testcase 24: Failed ##########
Expected Output: 
2
6
346
13
134
58
8
9
4
8
36
138
13
348
34
368
368
3
235
23
48
234
23
38
147
147
13
137
127
1239
1239
1379
1379
128
128
129
19

Your Output: 
36421
36421
36421
36421
36421
8459
8459
8459
8459
6381
6381
6381
6381
6348
6348
6348
6348
352
352
352
3428
3428
3428
3428
7341
7341
7341
7341
32179
32179
32179
32179
32179
1892
1892
1892
1892
----------------------------------------

